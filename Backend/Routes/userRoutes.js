// const { providerRegister, providerLogin } = require('../Controllers/providerController.js');
import {userRegister, userLogin} from '../Controllers/userController.js';
import {providerRegister, providerLogin} from '../Controllers/providerController.js';

// userRoutes.js
import express from 'express';
import passport from 'passport';


import authMiddleware from '../Middlewares/authMiddleware.js'; // Added .js (Ensure this file uses ES module exports)


const router = express.Router();

// --- Standard User and Provider Routes ---
router.post('/register', userRegister);
router.post('/login', userLogin);
router.post('/provider-register', providerRegister);
router.post('/provider-login', providerLogin);

// --- Google OAuth Routes ---
router.get(
    '/oauth/google',
    passport.authenticate('google', { scope: ['profile', 'email'] })
    // The callback function here (req, res) => {} is generally not needed
    // as passport.authenticate handles the redirect to Google.
);

router.get(
    '/oauth/google/callback',
    passport.authenticate('google', {
        failureRedirect: `${process.env.FRONTEND_URL}/login?error=google_auth_failed`, // Send user to frontend login with error
        session: false, // Important if you are using token-based auth (JWT)
    }),
    (req, res) => {
        // Ensure req.user is populated by your Passport strategy's 'done' callback.
        // 'req.user' here should be the user object from your database,
        // and the JWT ('token') should have been generated by your strategy
        // or a subsequent step and attached to req.user or directly available.
        if (!req.user || !req.user.token) {
            console.error('Google OAuth Callback: User or token not found in req.user', req.user);
            // Redirect to frontend with a generic error
            return res.redirect(`${process.env.FRONTEND_URL}/login?error=token_generation_failed`);
        }

        const token = req.user.token; // This token is generated by YOUR backend after successful Google auth
        // Redirect to a frontend route that can handle the token (e.g., store it and then redirect to dashboard)
        res.redirect(`${process.env.FRONTEND_URL}/auth/oauth-success?token=${token}`);
    }
);

// Example of a protected route using the imported authMiddleware
// router.get('/me', authMiddleware, (req, res) => {
//   res.json({ user: req.user }); // Assuming authMiddleware populates req.user
// });

// Use ES Module export
export default router;